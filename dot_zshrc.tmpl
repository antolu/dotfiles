# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# ============================================================================
# 
# Environment variables
#
# ============================================================================

export KRB5CCNAME=FILE:/tmp/krb5cc_`id -u`

export EDITOR=nvim
export VISUAL=nvim

# ============================================================================
# 
# Aliases
#
# ============================================================================

{{- if eq .chezmoi.os "darwin" }}
# macos
alias ibrew="arch -x86_64 /usr/local/bin/brew"
{{ end }}

{{- if eq .chezmoi.os "linux" }}
alias srestart='sudo systemctl restart'
alias sstatus='sudo systemctl status'
alias sstart='sudo systemctl start'
alias sstop='sudo systemctl stop'

# arch
alias pac='sudo pacman -Sy'
alias wifi="nmcli d wifi"
alias windows='sudo nextboot Microsoft && sudo reboot'
{{ end -}}

function pip() {
    if command -v uv &> /dev/null; then
        uv pip "$@"
    else
        python -m pip "$@"
    fi
}

# cern
alias source-accpy='source /acc/local/share/python/acc-py/pro/setup.sh'
alias ml1="ssh -XY  -tt ml1 'zsh -l'"
alias ml2="ssh -XY -tt ml2 'zsh -l'"
alias ml3="ssh -XY -tt ml3 'zsh -l'"
alias ml4="ssh -XY -tt ml4 'zsh -l'"
alias jump-rhel="ssh -XY -tt vm-el9 'zsh -l'"
alias cernvmproxy='ssh -L 5901:localhost:5901 vm-cc7'
alias cernproxy='ssh -N -D 9090 lxplus'

alias pypi-install='pip install --index-url https://pypi.org/simple/ --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host=files.pythonhosted.org'
alias pypi-upgrade='pip install --upgrade --index-url https://pypi.org/simple/ --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host=files.pythonhosted.org'

alias accpy-install='pip install --index-url https://acc-py-repo.cern.ch/repository/vr-py-releases/simple/ --trusted-host acc-py-repo.cern.ch'
alias accpy-upgrade='pip install --upgrade --index-url https://acc-py-repo.cern.ch/repository/vr-py-releases/simple/ --trusted-host acc-py-repo.cern.ch'

alias pip-install-e="pip install -e --config-settings editable_mode=compat"
alias pypi-install-e="pypi-install -e --config-settings editable_mode=compat"
alias accpy-install-e="accpy-install -e --config-settings editable_mode=compat"

alias install-acc-py-hooks="python -m pip install git+https://gitlab.cern.ch/acc-co/devops/python/acc-py-pip-config.git"
alias pipgrep="pip list | grep"

# random convenience
alias please='sudo'
alias gitls='git status'
alias checkout="git checkout"
alias commit="git commit"
alias pull="git pull"
alias push="git push"
alias delete="rm -rf"
alias svim='sudo vim'
alias chedit="chezmoi edit --apply"

# ============================================================================
# 
# Functions 
#
# ============================================================================

generateSSHKeychain() {
	if [[ ! -f ~/.ssh/id_ed25519 ]]; then
		echo "=> Generating ssh-keys"
		ssh-keygen -t ed25519 -C "$USER@`cat /proc/sys/kernel/hostname`" -N ''
		eval $(ssh-agent -s)
		ssh-add ~/.ssh/id_ed25519
    echo "=> SSH keys generated and added to agent."
    echo "=> Public key:"
    cat ~/.ssh/id_ed25519.pub
  else
    echo "=> SSH keys already exist."
	fi
}

linkport() {
  port="$1"
  hostname="$2"
  
  # check if port is int
  # check arguments
  echo "=> Forwarding port $port from $hostname to localhost"
  ssh -L "$port":localhost:"$port" $hostname
}

VENVDIR=~/.venvs

srcvenv() {
    if [[ -z "$1" ]]; then
        echo "usage: srcvenv [venv-name]"
        return 1
    fi
    venv_dir=$VENVDIR/$1

    if [ ! -d $venv_dir ]; then
        echo "$1 is not a valid venv in $VENVDIR"
        return 2
    fi

    if [[ ! -z $VIRTUAL_ENV ]]; then
        echo "Deactivating venv in $VIRTUAL_ENV"
        deactivate
    fi

    echo "Sourcing venv in $venv_dir"
    source $venv_dir/bin/activate
    
    echo "Done!"
}

mkc () {
	mkdir -p "$1"
	cd "$1"
}

gitc () {
  git clone "$1" "$2"

  if [[ -z $2 ]]; then
    cd "$2"
  else
    cd "$1"
  fi
}

ghcs() {
	FUNCNAME="$funcstack[1]"
	TARGET="shell"
	local GH_DEBUG="$GH_DEBUG"
	local GH_HOST="$GH_HOST"

	read -r -d '' __USAGE <<-EOF
	Wrapper around \`gh copilot suggest\` to suggest a command based on a natural language description of the desired output effort.
	Supports executing suggested commands if applicable.

	USAGE
	  $FUNCNAME [flags] <prompt>

	FLAGS
	  -d, --debug           Enable debugging
	  -h, --help            Display help usage
	      --hostname        The GitHub host to use for authentication
	  -t, --target target   Target for suggestion; must be shell, gh, git
	                        default: "$TARGET"

	EXAMPLES

	- Guided experience
	  $ $FUNCNAME

	- Git use cases
	  $ $FUNCNAME -t git "Undo the most recent local commits"
	  $ $FUNCNAME -t git "Clean up local branches"
	  $ $FUNCNAME -t git "Setup LFS for images"

	- Working with the GitHub CLI in the terminal
	  $ $FUNCNAME -t gh "Create pull request"
	  $ $FUNCNAME -t gh "List pull requests waiting for my review"
	  $ $FUNCNAME -t gh "Summarize work I have done in issues and pull requests for promotion"

	- General use cases
	  $ $FUNCNAME "Kill processes holding onto deleted files"
	  $ $FUNCNAME "Test whether there are SSL/TLS issues with github.com"
	  $ $FUNCNAME "Convert SVG to PNG and resize"
	  $ $FUNCNAME "Convert MOV to animated PNG"
	EOF

	local OPT OPTARG OPTIND
	while getopts "dht:-:" OPT; do
		if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
			OPT="${OPTARG%%=*}"       # extract long option name
			OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
			OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
		fi

		case "$OPT" in
			debug | d)
				GH_DEBUG=api
				;;

			help | h)
				echo "$__USAGE"
				return 0
				;;

			hostname)
				GH_HOST="$OPTARG"
				;;

			target | t)
				TARGET="$OPTARG"
				;;
		esac
	done

	# shift so that $@, $1, etc. refer to the non-option arguments
	shift "$((OPTIND-1))"

	TMPFILE="$(mktemp -t gh-copilotXXXXXX)"
	trap 'rm -f "$TMPFILE"' EXIT
	if GH_DEBUG="$GH_DEBUG" GH_HOST="$GH_HOST" gh copilot suggest -t "$TARGET" "$@" --shell-out "$TMPFILE"; then
		if [ -s "$TMPFILE" ]; then
			FIXED_CMD="$(cat $TMPFILE)"
			print -s "$FIXED_CMD"
			echo
			eval "$FIXED_CMD"
		fi
	else
		return 1
	fi
}

ghce() {
	FUNCNAME="$funcstack[1]"
	local GH_DEBUG="$GH_DEBUG"
	local GH_HOST="$GH_HOST"

	read -r -d '' __USAGE <<-EOF
	Wrapper around \`gh copilot explain\` to explain a given input command in natural language.

	USAGE
	  $FUNCNAME [flags] <command>

	FLAGS
	  -d, --debug      Enable debugging
	  -h, --help       Display help usage
	      --hostname   The GitHub host to use for authentication

	EXAMPLES

	# View disk usage, sorted by size
	$ $FUNCNAME 'du -sh | sort -h'

	# View git repository history as text graphical representation
	$ $FUNCNAME 'git log --oneline --graph --decorate --all'

	# Remove binary objects larger than 50 megabytes from git history
	$ $FUNCNAME 'bfg --strip-blobs-bigger-than 50M'
	EOF

	local OPT OPTARG OPTIND
	while getopts "dh-:" OPT; do
		if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
			OPT="${OPTARG%%=*}"       # extract long option name
			OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
			OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
		fi

		case "$OPT" in
			debug | d)
				GH_DEBUG=api
				;;

			help | h)
				echo "$__USAGE"
				return 0
				;;

			hostname)
				GH_HOST="$OPTARG"
				;;
		esac
	done

	# shift so that $@, $1, etc. refer to the non-option arguments
	shift "$((OPTIND-1))"

	GH_DEBUG="$GH_DEBUG" GH_HOST="$GH_HOST" gh copilot explain "$@"
}


wifiscan () {
  wifi list
}

wificonnect () {
  if [[ -z "$2" ]]; then
    wifi connect "$1"
  else
    wifi connect "$1" password "$2"
  fi
}

watchfile() {
while inotifywait -q -e modify "$1" >/dev/null; do
    "$2"
done
}

mkv2mp4() {
    ffmpeg -i "$1" -map 0 -codec copy -c:s mov_text -tag:v hvc1 "$2"
}

clip() {
    xclip -selection C "$1"
}

sedrename() {
  if [ $# -gt 1 ]; then
    sed_pattern=$1
    shift
    for file in $(ls $@); do
      mv -v "$file" "$(sed $sed_pattern <<< $file)"
    done
  else
    echo "usage: $0 sed_pattern files..."
  fi
}

syncdir() {
  if [[ -z `command -v rsync` ]]; then
    echo "rsync is not installed. Exiting."
    return 1
  fi

  if [[ -z "$1" ]]; then
    DIR="$HOME/code"
    echo "Directory not supplied. Using default $DIR."
  else
    DIR="$1"
  fi

  if [[ -z "$2" ]]; then
    if [[ ! -z "$1" ]]; then
      echo "\033[-;31m => You have to supply a destination if using a custom origin."
      return 2
     fi
    RDIR="olympus:code"
  else
    RDIR="$2"
  fi

  if [[ -z "$3" ]]; then  # recursion depth
    N=2
  else
    N="$3"
  fi

  if [[ ! -d "$DIR" ]]; then
    echo "$DIR is not a directory. Exiting."
    return
  fi

  RSYNCFLAGS=" -azuzP --delete "

  if [[ -f "$DIR/.syncignore" || N -eq "0" ]]; then
    RSYNCFLAGS+=" --exclude-from=$DIR/.syncignore "
    eval "rsync $RSYNCFLAGS $DIR/ $RDIR"
    eval "rsync $RSYNCFLAGS $RDIR/ $DIR"
    echo -e "\033[0;34m => Sync finished."
    return
  else
    DEPTH=$(( N - 1 ))
    for dir in $DIR/*/; do
      sleep 1
      folder=${dir#"$DIR"}
      remote="$RDIR/$folder"

      # Add trailing slash
      dir="$dir/"

      # echo "origin: $dir | remote: $remote | N=$DEPTH"
      syncdir $dir $remote $DEPTH
    done
    return
  fi

  echo -e "\033[0;32m => Sync finished."
}


# ============================================================================
# 
# Other
#
# ============================================================================

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
CONDA_PATH=~/.conda
if [[ ! -z `command -v $CONDA_PATH/bin/conda` ]]; then
    __conda_setup="$("$CONDA_PATH/bin/conda" "shell.zsh" "hook")"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "$CONDA_PATH/etc/profile.d/conda.sh" ]; then
            . "$CONDA_PATH/etc/profile.d/conda.sh"
        else
            export PATH="$CONDA_PATH/bin:$PATH"
        fi
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

